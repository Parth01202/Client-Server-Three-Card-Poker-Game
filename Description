**Client-Server Three Card Poker Game**

The Client-Server Three Card Poker Game is a networked application built in Java that simulates the gameplay of Three Card Poker, allowing multiple players to connect to a server, place bets, and interact in real-time. The project demonstrates the use of client-server architecture, GUI development, and network communication.

### **Project Overview**
The application consists of two main components:
1. **Server**: Acts as the central authority to manage the game state, player connections, and gameplay logic.
2. **Client**: Provides an interactive user interface for players to participate in the game, built using JavaFX with FXML and CSS for styling.

---

### **How the Project Works**

#### **1. Server Functionality**
- **Connection Management**:  
  The server is responsible for accepting incoming connections from clients. Each client represents a player in the game. Player sessions are handled using separate threads to ensure concurrency.
  
- **Game Logic**:  
  The server implements all the rules of Three Card Poker, including:
  - Dealing cards to players and the dealer.
  - Comparing hands using standard poker rankings.
  - Calculating and updating bets and winnings.

- **Communication**:  
  The server uses TCP/IP sockets for communication. It sends game states, player actions, and results back to the connected clients.

#### **2. Client Functionality**
- **Graphical User Interface (GUI)**:  
  Each client has a GUI designed with JavaFX, making the application user-friendly and visually appealing. The interface includes:
  - A **welcome screen** with options to connect to the server.
  - A **gameplay screen** displaying the player’s cards, dealer’s cards, and current bets.
  - An **options menu** to modify settings or restart the game.

- **FXML and CSS Integration**:  
  - The GUI is structured using FXML files for layout and styled with CSS for aesthetics.
  - Dynamic elements, such as card animations and bet updates, enhance user experience.

- **User Interactions**:  
  Players can:
  - Place bets and make gameplay decisions (e.g., fold, raise, play).
  - View real-time updates of game progress and results.

#### **3. Communication Workflow**
- **Request-Response Model**:  
  - Players interact with the client interface, which sends their actions (e.g., bets or decisions) to the server.
  - The server processes the input, updates the game state, and sends responses back to the client.
  
- **Real-Time Updates**:  
  All players receive updates about the game, ensuring synchronized gameplay across clients.

---

### **Key Features**
1. **Multiplayer Support**: Multiple clients can connect to the server and play simultaneously.
2. **Real-Time Communication**: Synchronized updates between the server and all connected clients.
3. **Customizable UI**: Options for GUI customization, including themes via the 'NewLook' feature.
4. **Error Handling**: Handles disconnections, invalid inputs, and edge cases gracefully to maintain game integrity.
5. **Modular Design**: Server and client code are modular, making the system easy to maintain and extend.

---

### **Technologies Used**
- **Programming Language**: Java
- **GUI Framework**: JavaFX with FXML and CSS
- **Networking**: TCP/IP Sockets
- **Concurrency**: Multi-threaded server architecture

---

This project showcases skills in software architecture, GUI development, and network programming while providing an engaging and interactive gaming experience.
